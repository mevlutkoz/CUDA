__global__ void reduceNeighborhed(int *in, int *out, unsigned int n)
{
	unsigned int tid = threadIdx.x
	unsigned idx = blockDim.x * blockIdx.x + threadIdx.x;

	int *idata = in + blockDim.x * blockIdx.x;

	if(idx > n)
	{
		return;
	}


	for(int stride = 1 ; stride < blockDim.x; stride *=2)
	{
		if(tid %(2*stride) == 0)
		{
			idata[i] += idata[tid + stride];
		}

		__synchtreads();
	}

	if(tid == 0)
		out[blockIdx.x] = idata[0];
}

int recursiveReduce(int *data, const int size)
{
	if(size == 0)
		return data[0];

	int const stride = size/2;

	for(int i = 0; i < size; i++)
		data[i] += data[i + stride]

	return recursiveReduce(int *data, stride);

}

int main(int argc, char **argv)
{
	int dev = 0;
	cudaDeviceProp deviceProp;
	cudaGetDeviceProperties(&deviceProp, dev);
	printf("%s starting the reduction at", argc[0]);
	printf("Device: %d  %s", dev, deviceProp.name);
	cudaSetDevice(dev);

	bool bResult = false;
	int size = 1<<23;
	printf("With array size %d \n", size);

	int blocksize = 512;

	if(argc > 2)
		blocksize = atoi(argv[1]);

	dim3 block(blocksize,1);
	dim3 grid((size + block.x -1)/block.x, 1);
	printf("grid: %d block: %d \n", grid.x, block.x);

	size_t nbytes = sizeof(int) * size;

	int *h_indata = (int *)malloc(nBytes);
	int h_odata = (int *)malloc(grid.x * sizeof(int));
	int *temp = (int *)malloc(nBytes);

	for(int i = 0; i < size; i++)
		h_indata[i] = (int)(rand() & 0xFF);

	memcpy(temp, h_indata, nbytes);


	size_t start, elaps;
	int gpu_sum = 0;

	int *d_indata = NULL;
	int *d_odata = NULL;

	cudaMalloc((void **)&d_indata, nbytes);
	cudaMalloc((void **)&d_odata, grid.x * sizeof(int));

	start = cpuSecond();
	int cpu_sum = recursiveReduce(tmp,size);
	elaps = cpuSecond() - start;
	printf("cpu reduce elapsed: %d ms cpu_sum : %d\n", elaps, cpu_sum);

	cudaMemcpy(d_indata, h_indata, nbytes, cudaMemcpyHostToDevice);
	cudaDeviceSynchronize();
	start = cpuSecond();
	warmup<<<grid,block>>>(d_indata, d_odata, size);
	elaps = cpuSecond() - start;

	cudaMemcpy(h_odata, d_odata, grid.x*sizeof(int), cudaMemcpyDeviceToHost);

	gpu_sum = 0;
	for(int i = 0; i < grid.x; i++)
		gpu_sum += h_odata[i];

	printf("warmup kernel elapsed: %d gpu_sum: %d <<<grid: %d block: %d>>>\n", elaps, gpu_sum, grid.x, block.x);

	cudaMemcpy(d_indata, h_indata, nbytes, cudaMemcpyHostToDevice);
	cudaDeviceSynchronize();

	start = cpuSecond();
	reduceNeighborhed<<<grid,block>>>(d_indata, d_odata, size);
	cudaDeviceSynchronize();
	elaps = cpuSecond() - start;

	cudaMemcpy(h_odata, d_odata, grid.x * sizeof(int), cudaMemcpyDeviceToHost);

	gpu_sum = 0;
	for(int i = 0; i<grid.x; i++)
		gpu_sum+=h_odata[i];

	printf("gpuNeighbored elapsed: %d ms gpu_sum: %d <<< grid.x, block.x>>> \n", elaps, gpu_sum, grid.x, block.x);

	cudaDeviceSynchronize();

	free(h_odata);
	free(h_indata);
	free(temp);

	cudaFree(d_indata);
	cudaFree(d_odata);

	cudaDeviceReset();


	bResult = (gpu_sum == cpu_sum);
	if(!bResult)
	{
		printf("Test failed"):
	}

	return EXIT_SUCCESS;
}

